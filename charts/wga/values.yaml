## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
global:
  imageRegistry: "ghcr.io/kraudcloud"
  privateImageRegistry: "ctr.0x.pt/wga"

## @section Common parameters
##

## @param endpoint.clientCIDR CIDR range for client IPs. This is the range from which the wga pod will allocate IPs.
## @param endpoint.address Public address for the wireguard interface. Prefer using endpoint.service.loadBalancerIP
## @param endpoint.allowedIPs List of IPs that are allowed to connect to from the wireguard interface
## @param endpoint.logLevel Log level for the wireguard interface. error: 8, warn: 4, info: 0, debug: -4
## @param endpoint.annotations Additional annotations for the wireguard interface
## @param endpoint.labels Additional labels for the wireguard interface
## @param endpoint.resources CPU/Memory resource requests/limits for the wgap pod.
## @param endpoint.privateKeySecretName secret name for the private key of the wireguard interface. Should contain a single `privateKey` entry
##
endpoint:
  clientCIDR: ""
  address: ""
  allowedIPs: ""
  logLevel: 0
  annotations: {}
  labels: {}
  privateKeySecretName: ""

  ## @param endpoint.service.type Kubernetes Service type.
  ## @param endpoint.service.loadBalancerClass Kubernetes LoadBalancerClass to use
  ## @param endpoint.service.loadBalancerIP Kubernetes LoadBalancerIP to use
  ## @param endpoint.service.port Kubernetes Service port
  ## @param endpoint.service.annotations Additional annotations for the Service
  ## @param endpoint.service.labels Additional labels for the Service
  ##
  service:
    type: "LoadBalancer"
    loadBalancerClass: ""
    loadBalancerIP: ""
    port: 51820
    annotations: {}
    labels: {}

  ## @param endpoint.image.name endpoint image name
  ## @param endpoint.image.tag endpoint image tag
  ## @param endpoint.image.pullPolicy Image pull policy
  ##
  image:
    name: wga
    tag: ""
    pullPolicy: ""

  resources: {}
  # requests:
  #   cpu: 10m
  #   memory: 128Mi
  # limits:
  #   cpu: 50m
  #   memory: 256Mi

## @param web.image.name Image name for the web component
## @param web.image.tag Image tag for the web component
## @param web.image.pullPolicy Image pull policy for the web component
## @param web.resources CPU/Memory resource requests/limits for the web component
##
web:
  image:
    name: "wga-frontend"
    tag: "main"
    pullPolicy: ""

  resources: {}

  ## @param web.authId Authentik ID for the web component
  ## @param web.authSecret Authentik secret for the web component
  ## @param web.authIssuer Authentik issuer endpoint
  ## @param web.authAuthorization Authentik authorization endpoint
  ## @param web.debug Debug debug logging based on js-debug
  ##
  authId: ""
  authSecret: ""
  authIssuer: ""
  authAuthorization: ""
  debug: "*"

  ## @param web.service.type Kubernetes Service type for the web component
  ##
  service:
    type: "ClusterIP"

  ## @param web.annotations Additional annotations for the web component
  ## @param web.labels Additional labels for the web component
  ##
  annotations: {}
  labels: {}

## @param ingress.enabled Enable ingress resource for the web component
## @param ingress.annotations Additional annotations for the Ingress resource
## @param ingress.hosts Ingress hosts for the web component
## @param ingress.tls Ingress TLS configuration
## @param ingress.className Ingress class name for the web component
##
ingress:
  enabled: false
  annotations: {}
  hosts: []
  tls: []
  className: ""

## @param serviceAccount.create Specifies whether a service account should be created. A service is required for the wga to communicate with the Kubernetes API.
## @param serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template.
##
serviceAccount:
  create: true
  name: ""

## @section Cluster client
##

## @param clusterClient.enable enable a daemonset to access other clusters wga via WireguardClusterClient CRD
## @param clusterClient.resources CPU/Memory resource requests/limits for the clusterClient component
##
clusterClient:
  enable: false
  resources: {}
  # requests:
  #   cpu: 10m
  #   memory: 64Mi
  # limits:
  #   cpu: 50m
  #   memory: 128Mi

unbound:
  welcomeImage:
    name: "welcome-page"
    tag: "1.0.1"
    pullPolicy: ""
  enabled: false
  ip: null
