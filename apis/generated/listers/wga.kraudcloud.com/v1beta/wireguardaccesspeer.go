// Code generated by main. DO NOT EDIT.

package v1beta

import (
	v1beta "github.com/kraudcloud/wga/apis/wga.kraudcloud.com/v1beta"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WireguardAccessPeerLister helps list WireguardAccessPeers.
// All objects returned here must be treated as read-only.
type WireguardAccessPeerLister interface {
	// List lists all WireguardAccessPeers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta.WireguardAccessPeer, err error)
	// Get retrieves the WireguardAccessPeer from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta.WireguardAccessPeer, error)
	WireguardAccessPeerListerExpansion
}

// wireguardAccessPeerLister implements the WireguardAccessPeerLister interface.
type wireguardAccessPeerLister struct {
	indexer cache.Indexer
}

// NewWireguardAccessPeerLister returns a new WireguardAccessPeerLister.
func NewWireguardAccessPeerLister(indexer cache.Indexer) WireguardAccessPeerLister {
	return &wireguardAccessPeerLister{indexer: indexer}
}

// List lists all WireguardAccessPeers in the indexer.
func (s *wireguardAccessPeerLister) List(selector labels.Selector) (ret []*v1beta.WireguardAccessPeer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta.WireguardAccessPeer))
	})
	return ret, err
}

// Get retrieves the WireguardAccessPeer from the index for a given name.
func (s *wireguardAccessPeerLister) Get(name string) (*v1beta.WireguardAccessPeer, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta.Resource("wireguardaccesspeer"), name)
	}
	return obj.(*v1beta.WireguardAccessPeer), nil
}
