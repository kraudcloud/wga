// Code generated by codegen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta "github.com/kraudcloud/wga/apis/wga.kraudcloud.com/v1beta"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeWireguardAccessRules implements WireguardAccessRuleInterface
type FakeWireguardAccessRules struct {
	Fake *FakeWgaV1beta
}

var wireguardaccessrulesResource = schema.GroupVersionResource{Group: "wga.kraudcloud.com", Version: "v1beta", Resource: "wireguardaccessrules"}

var wireguardaccessrulesKind = schema.GroupVersionKind{Group: "wga.kraudcloud.com", Version: "v1beta", Kind: "WireguardAccessRule"}

// Get takes name of the wireguardAccessRule, and returns the corresponding wireguardAccessRule object, and an error if there is any.
func (c *FakeWireguardAccessRules) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta.WireguardAccessRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(wireguardaccessrulesResource, name), &v1beta.WireguardAccessRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta.WireguardAccessRule), err
}

// List takes label and field selectors, and returns the list of WireguardAccessRules that match those selectors.
func (c *FakeWireguardAccessRules) List(ctx context.Context, opts v1.ListOptions) (result *v1beta.WireguardAccessRuleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(wireguardaccessrulesResource, wireguardaccessrulesKind, opts), &v1beta.WireguardAccessRuleList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta.WireguardAccessRuleList{ListMeta: obj.(*v1beta.WireguardAccessRuleList).ListMeta}
	for _, item := range obj.(*v1beta.WireguardAccessRuleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested wireguardAccessRules.
func (c *FakeWireguardAccessRules) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(wireguardaccessrulesResource, opts))
}

// Create takes the representation of a wireguardAccessRule and creates it.  Returns the server's representation of the wireguardAccessRule, and an error, if there is any.
func (c *FakeWireguardAccessRules) Create(ctx context.Context, wireguardAccessRule *v1beta.WireguardAccessRule, opts v1.CreateOptions) (result *v1beta.WireguardAccessRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(wireguardaccessrulesResource, wireguardAccessRule), &v1beta.WireguardAccessRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta.WireguardAccessRule), err
}

// Update takes the representation of a wireguardAccessRule and updates it. Returns the server's representation of the wireguardAccessRule, and an error, if there is any.
func (c *FakeWireguardAccessRules) Update(ctx context.Context, wireguardAccessRule *v1beta.WireguardAccessRule, opts v1.UpdateOptions) (result *v1beta.WireguardAccessRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(wireguardaccessrulesResource, wireguardAccessRule), &v1beta.WireguardAccessRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta.WireguardAccessRule), err
}

// Delete takes name of the wireguardAccessRule and deletes it. Returns an error if one occurs.
func (c *FakeWireguardAccessRules) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(wireguardaccessrulesResource, name, opts), &v1beta.WireguardAccessRule{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeWireguardAccessRules) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(wireguardaccessrulesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta.WireguardAccessRuleList{})
	return err
}

// Patch applies the patch and returns the patched wireguardAccessRule.
func (c *FakeWireguardAccessRules) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta.WireguardAccessRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(wireguardaccessrulesResource, name, pt, data, subresources...), &v1beta.WireguardAccessRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta.WireguardAccessRule), err
}
