// Code generated by main. DO NOT EDIT.

package v1beta

import (
	"context"
	"time"

	scheme "github.com/kraudcloud/wga/apis/generated/clientset/versioned/scheme"
	v1beta "github.com/kraudcloud/wga/apis/wga.kraudcloud.com/v1beta"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// WireguardAccessRulesGetter has a method to return a WireguardAccessRuleInterface.
// A group's client should implement this interface.
type WireguardAccessRulesGetter interface {
	WireguardAccessRules() WireguardAccessRuleInterface
}

// WireguardAccessRuleInterface has methods to work with WireguardAccessRule resources.
type WireguardAccessRuleInterface interface {
	Create(ctx context.Context, wireguardAccessRule *v1beta.WireguardAccessRule, opts v1.CreateOptions) (*v1beta.WireguardAccessRule, error)
	Update(ctx context.Context, wireguardAccessRule *v1beta.WireguardAccessRule, opts v1.UpdateOptions) (*v1beta.WireguardAccessRule, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta.WireguardAccessRule, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta.WireguardAccessRuleList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta.WireguardAccessRule, err error)
	WireguardAccessRuleExpansion
}

// wireguardAccessRules implements WireguardAccessRuleInterface
type wireguardAccessRules struct {
	client rest.Interface
}

// newWireguardAccessRules returns a WireguardAccessRules
func newWireguardAccessRules(c *WgaV1betaClient) *wireguardAccessRules {
	return &wireguardAccessRules{
		client: c.RESTClient(),
	}
}

// Get takes name of the wireguardAccessRule, and returns the corresponding wireguardAccessRule object, and an error if there is any.
func (c *wireguardAccessRules) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta.WireguardAccessRule, err error) {
	result = &v1beta.WireguardAccessRule{}
	err = c.client.Get().
		Resource("wireguardaccessrules").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of WireguardAccessRules that match those selectors.
func (c *wireguardAccessRules) List(ctx context.Context, opts v1.ListOptions) (result *v1beta.WireguardAccessRuleList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta.WireguardAccessRuleList{}
	err = c.client.Get().
		Resource("wireguardaccessrules").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested wireguardAccessRules.
func (c *wireguardAccessRules) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("wireguardaccessrules").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a wireguardAccessRule and creates it.  Returns the server's representation of the wireguardAccessRule, and an error, if there is any.
func (c *wireguardAccessRules) Create(ctx context.Context, wireguardAccessRule *v1beta.WireguardAccessRule, opts v1.CreateOptions) (result *v1beta.WireguardAccessRule, err error) {
	result = &v1beta.WireguardAccessRule{}
	err = c.client.Post().
		Resource("wireguardaccessrules").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(wireguardAccessRule).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a wireguardAccessRule and updates it. Returns the server's representation of the wireguardAccessRule, and an error, if there is any.
func (c *wireguardAccessRules) Update(ctx context.Context, wireguardAccessRule *v1beta.WireguardAccessRule, opts v1.UpdateOptions) (result *v1beta.WireguardAccessRule, err error) {
	result = &v1beta.WireguardAccessRule{}
	err = c.client.Put().
		Resource("wireguardaccessrules").
		Name(wireguardAccessRule.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(wireguardAccessRule).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the wireguardAccessRule and deletes it. Returns an error if one occurs.
func (c *wireguardAccessRules) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("wireguardaccessrules").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *wireguardAccessRules) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("wireguardaccessrules").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched wireguardAccessRule.
func (c *wireguardAccessRules) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta.WireguardAccessRule, err error) {
	result = &v1beta.WireguardAccessRule{}
	err = c.client.Patch(pt).
		Resource("wireguardaccessrules").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
