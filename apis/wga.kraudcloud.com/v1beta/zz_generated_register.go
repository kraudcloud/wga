// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=wga.kraudcloud.com
package v1beta

import (
	wga "github.com/kraudcloud/wga/apis/wga.kraudcloud.com"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	WireguardAccessPeerResourceName    = "wireguardaccesspeers"
	WireguardAccessRuleResourceName    = "wireguardaccessrules"
	WireguardClusterClientResourceName = "wireguardclusterclients"
)

// SchemeGroupVersion is group version used to register these objects
var SchemeGroupVersion = schema.GroupVersion{Group: wga.GroupName, Version: "v1beta"}

// Kind takes an unqualified kind and returns back a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

var (
	SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
	AddToScheme   = SchemeBuilder.AddToScheme
)

// Adds the list of known types to Scheme.
func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&WireguardAccessPeer{},
		&WireguardAccessPeerList{},
		&WireguardAccessRule{},
		&WireguardAccessRuleList{},
		&WireguardClusterClient{},
		&WireguardClusterClientList{},
	)
	metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}
